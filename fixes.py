from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler
from sklearn.model_selection import PredefinedSplit
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.svm import SVC
from fair_classifier.fair_logit_estimator import FairLogitEstimator
from fair_models import LogisticRegressionThresholdOptimized
import sys
import diffprivlib.models as dp

sys.path.append("dpml_benchmark/")
from dp import AmpLR, PsgdLR

num_classes = 2
lr_setup = dict(penalty='l2', solver='lbfgs', multi_class='ovr', n_jobs=-1)
model_zoo = {
    "lr": LogisticRegression(
        **lr_setup
    ),
    "fair_lr_dmpr": LogisticRegressionThresholdOptimized(
        **lr_setup
    ),

    "fair_lr_eo": LogisticRegressionThresholdOptimized(
        **lr_setup
    ),
    # "lr_amp_dp": AmpLR(
    #     epsilon=0.1,
    #     num_classes=num_classes,
    #     fit_args=dict(lambda_param=0.01),
    #     verbose=True,
    # ),
    # "lr_psgd_dp": PsgdLR(
    #     epsilon=0.1,
    #     num_classes=num_classes,
    #     fit_args=dict(L=1, learning_rate=0.001, lambda_param=0.01),
    #     verbose=True,
    # ),
    "lr_ibm_eps1_dp": Pipeline([
        ('scaler', MinMaxScaler()),
        ('clf', dp.LogisticRegression(max_iter=400, epsilon=1, data_norm=3.2))
    ]),
    # "nn_6": MLPClassifier(
    #     activation="relu",
    #     hidden_layer_sizes=[6],
    #     alpha=0.01,
    #     solver="adam",
    #     max_iter=200
    # ),
    # "nn_50": MLPClassifier(
    #     activation="relu",
    #     hidden_layer_sizes=[50],
    #     solver="adam",
    #     max_iter=200
    # ),
    # "nn_100": MLPClassifier(
    #     activation="relu",
    #     hidden_layer_sizes=[100],
    #     solver="adam",
    #     max_iter=200
    # ),
    # "nn_500": MLPClassifier(
    #     activation="relu",
    #     hidden_layer_sizes=[200],
    #     solver="adam",
    #     max_iter=200
    # ),

    # "svm": SVC(
    #     probability=True,
    #     C=0.1,
    #     kernel="rbf",
    # ),
    # "fair_lr": FairLogitEstimator()
}
