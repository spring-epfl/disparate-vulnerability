from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import PredefinedSplit
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.svm import SVC
from fair_classifier.fair_logit_estimator import FairLogitEstimator
from fair_models import LogisticRegressionThresholdOptimized
import sys

sys.path.append("dpml_benchmark/")
from dp import AmpLR, PsgdLR

num_classes = 2
model_zoo = {
    "lr": LogisticRegression(
        C=0.01,
        solver="liblinear",
        multi_class="auto",
    ),
    "fair_lr_dmpr": LogisticRegressionThresholdOptimized(
        C=0.01,
        solver="liblinear",
        multi_class="auto",
    ),

    "fair_lr_eo": LogisticRegressionThresholdOptimized(
        C=0.01,
        solver="liblinear",
        multi_class="auto",
    ),
    "lr_amp_dp": AmpLR(
        epsilon=1,
        num_classes=num_classes,
        fit_args=dict(lambda_param=0.01),
        verbose=True,
    ),
    "lr_psgd_dp": PsgdLR(
        epsilon=1,
        num_classes=num_classes,
        fit_args=dict(L=1, learning_rate=0.001, lambda_param=0.01),
        verbose=True,
    ),
    "nn_6": MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[6],
        alpha=0.01,
        solver="adam",
        max_iter=400
    ),
    "nn_50": MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[50],
        solver="adam",
        max_iter=400
    ),
    "nn_100": MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[100],
        solver="adam",
        max_iter=400
    ),
    "nn_500": MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[200],
        solver="adam",
        max_iter=400
    ),

        # "svm": SVC(
        #     probability=True,
        #     C=0.1,
        #     kernel="rbf",
        # ),
    # "fair_lr": FairLogitEstimator()
}
