import attr
import pytest


@attr.s
class OverfitSpec:
    tp_in = attr.ib()
    tp_out = attr.ib()
    fp_in = attr.ib()
    fp_out = attr.ib()

    @property
    def fn_in(self):
        return 1 - self.tp_in

    @property
    def fn_out(self):
        return 1 - self.tp_out

    @property
    def tn_in(self):
        return 1 - self.fp_in

    @property
    def tn_out(self):
        return 1 - self.fp_out

    @property
    def tp(self):
        return 0.5 * (self.tp_in + self.tp_out)

    @property
    def fp(self):
        return 0.5 * (self.fp_in + self.fp_out)

    @property
    def fn(self):
        return 0.5 * (self.fn_in + self.fn_out)

    @property
    def tn(self):
        return 0.5 * (self.tn_in + self.tn_out)


@attr.s
class SubgroupSpec:
    prop = attr.ib()
    tp = attr.ib()
    fp = attr.ib()

    @property
    def fn(self):
        return 1 - self.tp

    @property
    def tn(self):
        return 1 - self.fp


def check_consistency(overfit_spec, subgroup_specs):
    tp_subgroups = sum(s.prop * s.tp for s in subgroup_specs)
    fp_subgroups = sum(s.prop * s.fp for s in subgroup_specs)
    assert pytest.approx(tp_subgroups) == overfit_spec.tp
    assert pytest.approx(fp_subgroups) == overfit_spec.fp


def vuln(spec):
    """Compute average vulnerability."""

    terms = [
        max(spec.tp_in, spec.tp_out),
        max(spec.fp_in, spec.fp_out),
        max(spec.tn_in, spec.tn_out),
        max(spec.fn_in, spec.fn_out),
    ]
    return sum(terms) / 4.


def subgroup_vuln(overfit_spec, subgroup_spec):
    """Compute subgroup vulnerability."""
    terms = [
        max(overfit_spec.tp_in, overfit_spec.tp_out) * subgroup_spec.tp / overfit_spec.tp,
        max(overfit_spec.fp_in, overfit_spec.fp_out) * subgroup_spec.fp / overfit_spec.fp,
        max(overfit_spec.tn_in, overfit_spec.tn_out) * subgroup_spec.tn / overfit_spec.tn,
        max(overfit_spec.fn_in, overfit_spec.fn_out) * subgroup_spec.fn / overfit_spec.fn,
    ]
    return sum(terms) / 4.


def show_vuln(title, overfit_spec, subgroup_specs):
    print(title)
    print(overfit_spec, vuln(overfit_spec))
    for subgroup_spec in subgroup_specs:
        print(subgroup_spec, " Vulnerability:", subgroup_vuln(overfit_spec, subgroup_spec))
    print()


if __name__ == "__main__":
    overfit_spec = OverfitSpec(tp_in=0.99, tp_out=0.91, fp_in=0.02, fp_out=0.10)

    subgroup_specs_regular = [
        SubgroupSpec(prop=0.8, tp=0.98, fp=0.03),
        SubgroupSpec(prop=0.2, tp=0.83, fp=0.18),
    ]
    check_consistency(overfit_spec, subgroup_specs_regular)
    show_vuln("REGULAR", overfit_spec, subgroup_specs_regular)

    subgroup_specs_etp = [
        SubgroupSpec(prop=0.8, tp=overfit_spec.tp, fp=0.03),
        SubgroupSpec(prop=0.2, tp=overfit_spec.tp, fp=0.18),
    ]
    check_consistency(overfit_spec, subgroup_specs_etp)
    show_vuln("ETP", overfit_spec, subgroup_specs_etp)

    subgroup_specs_eo = [
        SubgroupSpec(prop=0.8, tp=overfit_spec.tp, fp=overfit_spec.fp),
        SubgroupSpec(prop=0.2, tp=overfit_spec.tp, fp=overfit_spec.fp),
    ]
    check_consistency(overfit_spec, subgroup_specs_eo)
    show_vuln("EO", overfit_spec, subgroup_specs_eo)
