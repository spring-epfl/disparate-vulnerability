import warnings

import numpy as np
import pandas as pd


def ensure_numpy(x):
    """
    >>> ensure_numpy(1)
    array(1)
    >>> ensure_numpy([1])
    array([1])
    >>> ensure_numpy(pd.Series([1]))
    array([1])
    >>> ensure_numpy(pd.DataFrame({"whatever": [1]}))
    array([[1]])
    """
    if isinstance(x, pd.Series) or isinstance(x, pd.DataFrame):
        return x.values
    elif not isinstance(x, np.ndarray):
        return np.array(x)
    else:
        return x


def get_num_classes(targets):
    """Infer the number of classes from the one-hot target vector.

    >>> get_num_classes(np.array([1, 0, 1]))
    2
    >>> get_num_classes(np.array([[0.1, 0.9], [0.5, 0.5]]))
    2
    >>> get_num_classes(np.array([[0, 1, 0, 0], [0, 0, 1, 0]]))
    4
    """
    if len(targets.shape) == 1 or targets.shape[1] == 2:
        return 2
    else:
        return targets.shape[1]


def get_classes_from_confidence(y, threshold=0.5):
    """Get the predicted class from a confidence vector.

    >>> get_classes_from_confidence(np.array([0.4, 0.2, 0.6]))
    array([0, 0, 1])
    >>> get_classes_from_confidence(np.array([[0.8, 0.2], [0.1, 0.9]]))
    array([0, 1])
    >>> get_classes_from_confidence(np.array([[0.2, 0.5, 0.3], [0.7, 0.2, 0.1]]))
    array([1, 0])
    """
    if get_num_classes(y) == 2 and len(y.shape) == 1:
        return (y > 0.5).astype(np.int64)
    else:
        return y.argmax(axis=1)


def get_one_hot_from_confidence(y, threshold=0.5):
    """Get the predicted class, one-hot encoded, from a confidence vector.

    >>> get_one_hot_from_confidence(np.array([0.4, 0.2, 0.6]))
    array([0, 0, 1])
    >>> get_one_hot_from_confidence(np.array([[0.2, 0.5, 0.3], [0.7, 0.2, 0.1]]))
    array([[0., 1., 0.],
           [1., 0., 0.]])
    """
    if get_num_classes(y) == 2:
        return (y > 0.5).astype(np.int64)
    else:
        result = np.zeros(y.shape)
        result[np.arange(len(y)), y.argmax(axis=1)] = 1.
        return result


def universal_slice(data, x_idxs):
    """
    Slice by index of either a pandas DataFrame, or a numpy array.

    >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
    >>> universal_slice(df, [1]).values
    array([[2, 5]])
    """
    if isinstance(data, np.ndarray):
        if len(data.shape) == 2:
            return data[x_idxs, :]
        elif len(data.shape) == 1:
            return data[x_idxs]
    elif isinstance(data, pd.DataFrame):
        if len(data.shape) == 2:
            return data.iloc[x_idxs, :]
        elif len(data.shape) == 1:
            return data.iloc[x_idxs]
    elif isinstance(data, pd.Series):
        return data.iloc[x_idxs]


def universal_col_slice(data, y_idxs=None):
    """
    Slice by column index of either a pandas DataFrame, or a numpy array.

    >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
    >>> universal_col_slice(df, 1).values
    array([4, 5, 6])
    """
    if isinstance(data, np.ndarray):
        if y_idxs is not None:
            return data[:, y_idxs]
    elif isinstance(data, pd.DataFrame):
        if y_idxs is not None:
            return data.iloc[:, y_idxs]


def _nan_to_zero(arr):
    try:
        arr[np.isnan(arr)] = 0
        return arr
    except TypeError:
        # Assume arr is a single object, not array.
        if np.isnan(arr):
            return 0.
        else:
            return arr
