import itertools
import pandas as pd


class ProbabilityEstimator:
    """
    Probability operator builder.

    >>> X = pd.DataFrame({"a": [1, 1, 2], "b": [3, 6, 3]})
    >>> prob_est = ProbabilityEstimator()
    >>> prob_est.of("a", 1).given("b", 4).fit(X)
    0.0
    >>> prob_est.of("a", 1).given("b", 3).fit(X)
    0.5
    >>> prob_est.of("a", 1).given("b", 6).fit(X)
    1.0
    """

    def __init__(self, of=None, given=None):
        self.lhs_exprs = of or {}
        self.rhs_exprs = given or {}

    def clear(self):
        self.lhs_exprs = {}
        self.rhs_exprs = {}

    @staticmethod
    def _build_query(**kwargs):
        queries = [f"`{k}` == {repr(v)}" for (k, v) in kwargs.items()]
        return " and ".join(queries)

    def __repr__(self):
        return f"ProbabilityEstimator(of={self.lhs_exprs}, given={self.rhs_exprs})"

    def of(self, label, value):
        self.lhs_exprs[label] = value
        return self

    def given(self, label, value):
        self.rhs_exprs[label] = value
        return self

    def fit(self, X):
        count_df = X.query(self._build_query(**self.lhs_exprs, **self.rhs_exprs))
        count = len(count_df)
        if self.rhs_exprs:
            norm_df = X.query(self._build_query(**self.rhs_exprs))
            norm = len(norm_df)
        else:
            norm = len(X)
        self.clear()

        if norm == 0.0:
            return 0.
        return count / norm


def _regular_vuln(learn_df, eval_df,
                  y_label, yhat_label, z_label,
                  y_range=None, yhat_range=None, z=None):
    if y_range is None:
        y_range = [0, 1]
    if yhat_range is None:
        yhat_range = [0, 1]

    obs_space = itertools.product(yhat_range, y_range)

    res = 0.0
    for (yhat, y) in obs_space:
        # max_m Pr[m | p, y]
        vuln = ProbabilityEstimator().of("m", 1) \
                    .given(yhat_label, yhat) \
                    .given(y_label, y) \
                    .fit(learn_df)
        vuln = max(vuln, 1 - vuln)

        # Pr[p, y]
        obs_prob = ProbabilityEstimator() \
                    .of(yhat_label, yhat) \
                    .of(y_label, y) \

        if z is not None:
            # or Pr[p, y | z]
            obs_prob = obs_prob.given(z_label, z)

        p = obs_prob.fit(eval_df)
        res += vuln * p

    return res


def _discriminating_vuln(learn_df, eval_df,
                         y_label, yhat_label, z_label, z_values,
                         y_range=None, yhat_range=None, z=None):
    if y_range is None:
        y_range = [0, 1]
    if yhat_range is None:
        yhat_range = [0, 1]

    res = 0.0
    if z is not None:
        z_values = [z]

    obs_space = itertools.product(yhat_range, y_range, z_values)

    for (yhat, y, z_prime) in obs_space:
        # max_m Pr[m | p, y, z']
        vuln = ProbabilityEstimator().of("m", 1) \
                    .given(yhat_label, yhat) \
                    .given(y_label, y) \
                    .given(z_label, z_prime) \
                    .fit(learn_df)
        vuln = max(vuln, 1 - vuln)

        obs_prob = ProbabilityEstimator() \
                    .of(yhat_label, yhat) \
                    .of(y_label, y) \

        if z is None:
            # Pr[p, y, z']
            obs_prob = obs_prob.of(z_label, z_prime)
        else:
            # Pr[p, y | z]
            obs_prob = obs_prob.given(z_label, z)

        p = obs_prob.fit(eval_df)
        res += vuln * p

    return res


def calc_vulnerability_closed_form(train_learn_df, train_eval_df, test_learn_df, test_eval_df,
        attacker, z_label, y_label, p_label, z_values, z_value=None, yhat_label="yhat"):

    learn_df = train_learn_df.assign(m=1).append(test_learn_df.assign(m=0))
    eval_df = train_eval_df.assign(m=1).append(test_eval_df.assign(m=0))

    if attacker == "regular":
        vuln = _regular_vuln(learn_df, eval_df, y_label=y_label, yhat_label=yhat_label,
                z_label=z_label, y_range=(0, 1), yhat_range=(0, 1), z=z_value)
    elif attacker == "discriminating":
        vuln = _discriminating_vuln(learn_df, eval_df, y_label=y_label, yhat_label=yhat_label,
                z_label=z_label, z_values=z_values, y_range=(0, 1), yhat_range=(0, 1), z=z_value)

    return vuln
