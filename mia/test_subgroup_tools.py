import pytest
import numpy as np
import pandas as pd

import utils
import subgroup_tools as tools

from sklearn.model_selection import train_test_split

from conftest import MockModel


@pytest.mark.parametrize(
    "data",
    [pytest.lazy_fixture("np_data"), pytest.lazy_fixture("pd_data")],
    ids=["numpy", "pandas"],
)
def test_run_mia_subgroups(data):
    X, y = data
    num_classes = utils.get_num_classes(y)
    target_model = MockModel(num_classes)
    attacker_model = MockModel(2)
    subgroup_specs = [
        tools.SubgroupSpec(name="A", idxs=[0, 1]),
        tools.SubgroupSpec(name="B", idxs=[2, 3, 4, 5]),
    ]

    result = tools.run_mia_subgroups(target_model, attacker_model, X, y, subgroup_specs)
    columns = ["attack_pred", "target_y_pred", "target_y_true", "target_y_proba"]
    assert "A" in result
    assert "B" in result
    assert set(result["A"].keys()) == set(columns)
    for col in columns:
        assert len(result["A"][col]) == len(subgroup_specs[0].idxs)
        assert len(result["B"][col]) == len(subgroup_specs[1].idxs)


def test_mia_loss_subgroups():
    ins_y_pred = np.array([[0.1, 0.1, 0.8], [0.1, 0.1, 0.8], [0.4, 0.2, 0.4]])
    outs_y_pred = np.array([[0.3, 0.5, 0.2], [0.2, 0.6, 0.2], [0.3, 0.2, 0.5]])
    ins_y_true = np.array([[0, 1, 0], [0, 1, 0], [1, 0, 0]])
    outs_y_true = np.array([[0, 0, 1], [0, 1, 0], [0, 1, 0]])
    subgroup_specs = [
        tools.SubgroupSpec(name="A", idxs=[0, 1]),
        tools.SubgroupSpec(name="B", idxs=[2]),
    ]

    results = tools.get_mia_loss_subgroups(
        ins_y_true, outs_y_true, ins_y_pred, outs_y_pred, subgroup_specs, subgroup_specs
    )

    assert len(results) == 2
    assert results["A"] != 0.0


@pytest.mark.parametrize(
    "data",
    [pytest.lazy_fixture("np_data"), pytest.lazy_fixture("pd_data")],
    ids=["numpy", "pandas"],
)
def test_mia_subgroups_experiment(data):
    X, y = data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    num_classes = utils.get_num_classes(y)
    target_model = MockModel(num_classes)
    attacker_model = MockModel(2)

    subgroup_specs_1 = lambda *args: [tools.SubgroupSpec(name="A", idxs=[0, 1])]
    subgroup_specs_2 = lambda *args: [tools.SubgroupSpec(name="B", idxs=[2, 3, 4, 5])]
    subgroup_spec_sets = [subgroup_specs_1, subgroup_specs_2]

    tp_results, fp_results, score = tools.mia_subgroups_experiment(
        target_model, X_train, y_train, X_test, y_test, subgroup_spec_sets
    )

    assert 0. <= score <= 1.
    columns = ["attack_pred", "target_y_pred", "target_y_true", "target_y_proba"]

    for result in [tp_results[0], fp_results[0]]:
        assert "A" in result
        assert set(result["A"].keys()) == set(columns)
        for col in columns:
            assert len(result["A"][col]) == 2

    for result in [tp_results[1], fp_results[1]]:
        assert "B" in result
        assert set(result["B"].keys()) == set(columns)
        for col in columns:
            assert len(result["B"][col]) == 4


def _make_experiment_result_dict(num_examples, num_classes):
    result = {"attack_pred": [0.5] * num_examples}

    model = MockModel(num_classes)
    if num_classes == 2:
        target_y_proba = model.predict_proba(["dummy"] * num_examples)[:, 1]
        result["target_y_true"] = [1] * num_examples
        result["target_y_proba"] = target_y_proba
        result["target_y_pred"] = utils.get_one_hot_from_confidence(target_y_proba)

    return result


@pytest.mark.parametrize("num_classes", [2])
def test_experiment_results_to_dataframes(num_classes):
    num_examples = 5
    results = {
        "A": _make_experiment_result_dict(num_examples, num_classes),
        "B": _make_experiment_result_dict(num_examples, num_classes),
    }

    df = tools.experiment_results_to_dataframes(results)
    assert list(df.columns) == [
        "subgroup",
        "attack_pred",
        "target_y_true",
        "target_y_pred",
        "target_y_proba",
    ]
    assert len(df) == 2 * num_examples
