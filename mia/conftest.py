import pytest
import numpy as np
import pandas as pd

import utils


def gen_data(num_classes=2, num_columns=3, size=128):
    X = np.random.normal(loc=0, scale=1, size=(size, num_columns))

    if num_classes == 2:
        y = np.random.choice(range(num_classes), size=size)
    elif num_classes > 2:
        y = np.zeros((size, num_classes))
        for i in range(size):
            c = np.random.choice(range(num_classes))
            y[i, c] = 1.
    return X, y


@pytest.fixture(params=[2, 100])
def pd_data(request):
    X, y = gen_data(num_classes=request.param)
    columns = [str(i) for i in range(X.shape[1])]
    X = pd.DataFrame(X, columns=columns)
    return X, y


@pytest.fixture(params=[2, 100])
def np_data(request):
    return gen_data(num_classes=request.param)


class MockModel:
    def __init__(self, num_classes, seed=None):
        self.num_classes = num_classes
        self.random_state = np.random.RandomState(seed)

    def predict_proba(self, xs):
        n = len(xs)
        if self.num_classes == 2:
            p = self.random_state.uniform(0, 1, size=n)
            y = np.column_stack([1 - p, p])
            assert y.shape == (n, 2)
            return y
        else:
            y = self.random_state.normal(size=(n, self.num_classes))
            y /= np.sum(y, axis=0)
            assert np.all(np.sum(y, axis=0) == pytest.approx(1))
            return y

    def predict(self, xs):
        return utils.get_classes_from_confidence(self.predict_proba(xs))
