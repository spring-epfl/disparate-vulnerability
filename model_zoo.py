"""
Model architectures and parameters.
"""

import numpy as np

from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder, MinMaxScaler
from sklearn.model_selection import PredefinedSplit
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression, LogisticRegressionCV
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.svm import SVC

from fairlearn.postprocessing import ThresholdOptimizer
from fairlearn.reductions import (
    GridSearch,
    ExponentiatedGradient,
    ErrorRateParity,
    DemographicParity,
    EqualizedOdds,
)

import diffprivlib.models as dp

fit_args = {
    "lr_dm": dict(sensitive=True),
    "lr_eo": dict(sensitive=True),
    "lr_erp": dict(sensitive=True),
}

lr_setup = dict(penalty="l2", solver="lbfgs", n_jobs=1, max_iter=500)

model_zoo = {
    "lr": lambda: LogisticRegression(**lr_setup),
    "lr_dm": lambda: GridSearch(
        LogisticRegression(**lr_setup),
        constraints=DemographicParity(difference_bound=0.01),
        grid_size=1024,
    ),
    "lr_eo": lambda: GridSearch(
        LogisticRegression(**lr_setup),
        constraints=EqualizedOdds(difference_bound=0.01),
        grid_size=1024,
    ),
    "lr_erp": lambda: GridSearch(
        LogisticRegression(**lr_setup),
        constraints=ErrorRateParity(difference_bound=0.01),
        grid_size=1024,
    ),
    "nn_6": lambda: MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[6],
        alpha=0.01,
        solver="adam",
        max_iter=200,
    ),
    "nn_32": lambda: MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[32],
        alpha=0.01,
        solver="adam",
        max_iter=200,
    ),
    "nn_100": lambda: MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[100],
        solver="sgd",
        max_iter=1000,
        learning_rate_init=0.1,
    ),
    "nn_500": lambda: MLPClassifier(
        activation="relu",
        hidden_layer_sizes=[500],
        solver="sgd",
        max_iter=1000,
        learning_rate_init=0.1,
    ),
}

renaming_dict = dict(
    lr="Logistic Regression (LR)",
    lr_dm="Fair LR (Dem. Parity)",
    lr_eo="Fair LR (Equalized Odds)",
    lr_erp="Fair LR (Err. Rate Parity)",
    nn_6="6-Neuron NN",
    nn_32="32-Neuron NN",
    nn_100="100-Neuron NN",
    nn_500="500-Neuron NN",
)
