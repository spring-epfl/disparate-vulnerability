import numpy as np
import fbleau
from sklearn.model_selection import train_test_split

from helpers import encode_dataframe


def estimate_vulnerability(train_learn_df, train_eval_df, test_learn_df, test_eval_df,
                       attacker, yhat_label, y_label, z_label, z_values, z_value=None,
                       estimate_method='frequentist', repeat=1):
    enc_dict = {item: i for i, item in enumerate(z_values)}

    def _encode_and_prepare(df):
        df_ = df[[yhat_label, y_label, z_label]].copy()
        df_.loc[:, z_label] = df_[z_label].apply(lambda x: enc_dict[x]).copy()
        return df_

    train_learn_df_ = _encode_and_prepare(train_learn_df)
    train_eval_df_ = _encode_and_prepare(train_eval_df)
    test_learn_df_ = _encode_and_prepare(test_learn_df)
    test_eval_df_ = _encode_and_prepare(test_eval_df)

    learn_df = train_learn_df_.assign(m=1).append(test_learn_df_.assign(m=0))
    eval_df = train_eval_df_.assign(m=1).append(test_eval_df_.assign(m=0))

    if z_value is not None:
        # we are calculating subgroup vulnerability
        eval_df = eval_df.loc[eval_df[z_label] == enc_dict[z_value]].copy()

    if attacker == "regular":
        O_learn = learn_df[[yhat_label, y_label]].values.astype(np.float64)
        O_eval = eval_df[[yhat_label, y_label]].values.astype(np.float64)
        S_learn = learn_df["m"].values.astype(np.uint64)
        S_eval = eval_df["m"].values.astype(np.uint64)
    elif attacker == "discriminating":
        O_learn = learn_df[[yhat_label, y_label, z_label]].values.astype(np.float64)
        O_eval = eval_df[[yhat_label, y_label, z_label]].values.astype(np.float64)
        S_learn = learn_df["m"].values.astype(np.uint64)
        S_eval = eval_df["m"].values.astype(np.uint64)
    else:
        raise NotImplementedError

    estimates = []
    for _ in range(repeat):
        vuln, _, _ = fbleau.run_fbleau(O_learn, S_learn, O_eval, S_eval,
                                       estimate=estimate_method,
                                       absolute=False, scale=False)

        estimates.append(vuln)

    estimate = np.mean(estimates)
    return 1 - estimate
