import pandas as pd
import numpy as np
import seaborn as sns

from scipy.stats import combine_pvalues
from statsmodels.stats.multitest import multipletests


def plot_vuln_dists(
    metrics_by_model,
    models,
    axes,
    vuln_method="python",
    renaming_dict=None,
    ignore_subgroups=None,
    legend=True,
):
    """
    Plot distribution plots of vulnerability values for all subgroups.
    """
    if renaming_dict is None:
        renaming_dict = {model: model for model in models}

    if ignore_subgroups is None:
        ignore_subgroups = []

    for ax_id, model_name in enumerate(models):
        metrics = metrics_by_model[model_name]
        plot_df = metrics.query(f"vuln_method=='{vuln_method}'")
        for ignore_subgroup in ignore_subgroups:
            plot_df = plot_df.query(f"subgroup != '{ignore_subgroup}'").copy()

        plot_df.loc[:, "vuln"] = plot_df.vuln.astype(np.float32)
        plot_df = (
            plot_df.groupby(["batch_no", "attacker", "vuln_method", "subgroup"])
            .agg({"vuln": "mean"})
            .reset_index()
        )
        plot_df = plot_df.replace(renaming_dict)

        g = sns.violinplot(
            data=plot_df.query("subgroup != 'Overall'"),
            x="vuln",
            hue="attacker",
            y="subgroup",
            ax=axes[0, ax_id],
            inner="quartile",
            split=True,
        )
        h = sns.violinplot(
            data=plot_df.query("subgroup == 'Overall'"),
            x="vuln",
            hue="attacker",
            y="subgroup",
            ax=axes[1, ax_id],
            inner="quartile",
            split=True,
        )

        axes[0, ax_id].set_xlabel("")
        axes[1, ax_id].set_xlabel("Vulnerability")
        if ax_id > 0:
            g.set_yticks([], [])
            h.set_yticks([], [])

        g.set_ylabel("Subgroups" if ax_id == 0 else "")
        h.set_ylabel("")
        h.get_legend().remove()
        g.set_title(renaming_dict[model_name])
        if legend and (ax_id == len(models) - 1):
            g.legend(title="Attacker")
        else:
            g.get_legend().remove()

    return axes


def plot_stat_heatmaps(
    metrics, p_matrices, subgroups, ax, alpha=0.005, mode="meta", method=None,
    xticklabels=True, yticklabels=True,
):
    """
    Plot heatmaps of pairwise t-tests for disparity between all subgroup pairs.
    """
    res_matrix = pd.DataFrame(
        np.zeros((len(subgroups), len(subgroups))), columns=subgroups, index=subgroups
    )

    for i, z1 in enumerate(subgroups):
        for j, z2 in enumerate(subgroups):
            p_values = []
            for p_matrix in p_matrices:
                p_values.append(p_matrix.loc[z1][z2])

            if mode == "multitests":
                rejects, _, _, _ = multipletests(p_values, alpha=alpha, method=method)
                res_matrix.loc[z1][z2] = rejects.mean()
            elif mode == "meta":
                _, fisher_p = combine_pvalues(p_values)
                res_matrix.loc[z1][z2] = float(fisher_p < alpha)

    mask = np.ones_like(res_matrix)
    mask[np.triu_indices_from(mask, k=1)] = False

    sns.heatmap(
        res_matrix,
        annot=True,
        mask=mask,
        square=True,
        vmin=0.0,
        vmax=1.0,
        ax=ax,
        xticklabels=xticklabels,
        yticklabels=yticklabels,
        cbar=False,
    )
    ax.set_ylim(len(subgroups), 0)
    return ax

