# Author: Mohammad Yaghini
# code snippets used from: https://www.kaggle.com/loaiabdalslam/gender-group-classification-with-cnn

import os
import pandas as pd
import numpy as np
import tqdm
import matplotlib.pyplot as plt
from keras.utils.np_utils import to_categorical
from skimage.transform import resize


def prepare_utkface(photos_folder_path, X_data_npz_file):
    list_of_files = os.listdir(photos_folder_path)
    meta_data = pd.Series(list_of_files).to_frame(name="filename")
    meta_data[["age", "gender", "race"]] = meta_data.filename.apply(
        lambda x: pd.Series(x.replace(".jpg.chip.jpg", "").split("_"))[:-1])
    meta_data = meta_data.apply(lambda x: pd.to_numeric(x, errors="ignore"))
    meta_data["y"] = pd.cut(meta_data["age"], bins=[0, 16, 25, 40, 55, 65, 120],
                            labels=["0-16", "17-25", "26-40", "41-55", "56-65", "above 65"], precision=0)

    y_cats = meta_data["y"].cat.categories
    y_label_encoder = dict(zip(y_cats, range(len(y_cats))))

    meta_data["y"] = meta_data["y"].apply(lambda x: y_label_encoder[x]).copy()
    meta_data.dropna(inplace=True)

    race_decoder = {0.0: "White", 1.0: "Black", 2.0: "Asian", 3.0: "Indian", 4.0: "Other"}
    meta_data["race"] = meta_data["race"].apply(lambda x: race_decoder[x]).copy()

    gender_decoder = {0: "Male", 1: "Female"}
    meta_data["gender"] = meta_data["gender"].apply(lambda x: gender_decoder[x]).copy()

    if os.path.exists(X_data_npz_file):
        with np.load(X_data_npz_file) as data:
            X_data = data['X_data']
    else:
        X_data = []
        for file in tqdm.tqdm_notebook(meta_data.filename.tolist()):
            try:
                face = plt.imread(file)
                face = resize(face, (32, 32))
                X_data.append(face)
            except:
                print("Problem with file: ", file)
        np.savez(X_data_npz_file, X_data=X_data)

    X = np.squeeze(X_data)

    # normalize data
    X = X.astype('float32')
    X /= 255
    y = to_categorical(meta_data["y"], num_classes=6)

    meta_data = meta_data.reset_index(drop=True).drop("filename", axis=1)

    return X, y, meta_data
